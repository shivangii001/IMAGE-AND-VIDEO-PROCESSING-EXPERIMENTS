# -*- coding: utf-8 -*-
"""exp-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X_fuU6buhLE-sEBjOjrANo2TOhcXPi99
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import cmath

def custom_fft(x):
    N = len(x)
    if N == 1:
        return x
    even = x[::2]
    odd = x[1::2]
    r_even = custom_fft(even)
    r_odd = custom_fft(odd)
    factor = np.exp(-2j * np.pi * np.arange(N) / N)
    return np.concatenate((r_even + factor[:N//2] * r_odd, r_even + factor[N//2:] * r_odd))

def custom_image_fft(image):
    fft_image = np.array([custom_fft(row) for row in image])
    fft_image = np.array([custom_fft(fft_image[:, i]) for i in range(image.shape[1])]).T
    return fft_image

def calculate_magnitude(fft_result):
    return np.abs(fft_result)

def apply_alternating_signs(image):
    image[1::2, 0::2] *= -1
    image[0::2, 1::2] *= -1
    return image

def reconstruct_image(fft_result, height, width):
    reconstructed_image = np.conjugate(np.transpose(fft_result))
    reconstructed_image = np.conjugate(np.transpose(custom_image_fft(reconstructed_image))) / (height * width)
    reconstructed_image = apply_alternating_signs(reconstructed_image)
    return reconstructed_image.real.astype('uint8')

def main():
    file_path = input('\nEnter the filename: ')
    i_image = np.array(mpimg.imread(file_path), dtype='float64')
    height, width = i_image.shape
    image_copy = i_image.copy()

    fig, ax = plt.subplots(2, 2, figsize=(12, 12))

    ax[1, 0].imshow(i_image, cmap='gray')
    ax[1, 0].set_title("Original Image")

    image_copy = apply_alternating_signs(image_copy)
    fft_image = custom_image_fft(image_copy)

    magnitude_spectrum = calculate_magnitude(fft_image)
    ax[0, 0].imshow(np.log(magnitude_spectrum + 1), cmap='gray')
    ax[0, 0].set_title("Log Magnitude Spectrum")

    ax[0, 1].imshow(np.vectorize(cmath.phase)(fft_image), cmap='gray')
    ax[0, 1].set_title("Phase Spectrum")

    reconstructed_image = reconstruct_image(fft_image, height, width)
    ax[1, 1].imshow(reconstructed_image, cmap="gray")
    ax[1, 1].set_title("Reconstructed Image")

    plt.show()

if __name__ == "__main__":
    main()